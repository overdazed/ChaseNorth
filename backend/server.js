const express = require('express');
const cors = require('cors');
// +++ instead of hardcoding it, create a environment variable to hold it
const dotenv = require('dotenv');

const connectDB = require("./config/db");

const userRoutes = require('./routes/userRoutes');
const productRoutes = require('./routes/productRoutes');
const cartRoutes = require('./routes/cartRoutes');
const checkoutRoutes = require('./routes/checkoutRoutes');
const orderRoutes = require('./routes/orderRoutes');
const uploadRoutes = require('./routes/uploadRoutes');
const subscribeRoute = require('./routes/subscribeRoute');
const adminRoutes = require('./routes/adminRoutes');
const productAdminRoutes = require('./routes/productAdminRoutes');
const adminOrderRoutes = require('./routes/adminOrderRoutes');

const app = express();
// ensure that our server is able to work with JSON data
app.use(express.json());
// to communicate with the react server, let's enable CORS origin request
app.use(cors());

// We'll make use of PORT 9000 for our backend server
// +++ instead of hardcoding it, create a environment variable to hold it
// const PORT = 9000;
dotenv.config();
// test if you are able to read the value in our server.js file
// console.log(process.env.PORT);

const PORT = process.env.PORT || 3000; // or use default port 3000

// connect to mongoDB database
connectDB();

// add basic route to test the server
app.get("/", (req, res) => {
    res.send('Hello from the backend server!')
});

// ADD ALL API ROUTES HERE //
app.use('/api/users', userRoutes); // this will prepend all /api/users to all our userRoutes
app.use('/api/products', productRoutes);
app.use('/api/cart', cartRoutes);
app.use('/api/checkout', checkoutRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/upload', uploadRoutes);
app.use('/api', subscribeRoute);

// Admin
app.use('/api/admin/users', adminRoutes);
app.use('/api/admin/products', productAdminRoutes);
app.use('/api/admin/orders', adminOrderRoutes);

// for making the request, we will be using postman, which is an API testing tool
// With the help of this tool you can send HTTP request and test the endpoints for our Application
// You can use it on the Web or download the desktop app
// Create a Workspace for the API

// Create a Collection -> 1. "Users", first request will be for registering the user "Register" Post request.
// add the URL http://localhost:9000/api/users/register
// select "Body" -> "raw" -> inside this, send our data
// {
//     "name": "John",
//     "email": "john@example.com"
//     "password": "123456"
// }
// click "Send" -> you should see the response back, our Push request is working fine
// go back to the userRoutes.js ... after try

// start the server on port 9000
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}` );
});

// open package.json file in backend folder
//  since we have created a server.js file, our main entry file will be server.js
// main: server.js

// run the server using node for the production
// start: "node backend/server.js"

// in development we will be making use of nodemon library
// "dev": "nodemon backend/server.js"

// npm run dev
// you should see the log below
// Server running on http://localhost:9000
// in Link you will be able to see the 'Hello from the backend server!' message
// If you see this, then you have successfully set up the express app


// User Schema
// ----------------------------------------------------------------------------
// | Field Name | Type     | Constraints                                      |
// |------------|----------|--------------------------------------------------|
// | _id        | ObjectId | Primary key, auto-generated by MongoDB           |
// | name       | String   | Required, trimmed of whitespace                  |
// | email      | String   | Required, unique, trimmed, email validated       |
// | password   | String   | Required, minimum length: 6                      |
// | role       | String   | Enum: ["customer", "admin"], Default: "customer" |
// | createdAt  | Date     | Auto-generated timestamp                         |
// | updatedAt  | Date     | Auto-updated timestamp                           |